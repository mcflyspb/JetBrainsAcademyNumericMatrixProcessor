type: edu
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {

        @Override
        public List<TestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.strip();
            reply = reply.strip();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = reply.lines().collect(Collectors.toList());
            List<String> answ = clue.lines().collect(Collectors.toList());

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).strip();
                String answLine = answ.get(i).strip();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/processor/Process.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    public class Process {
        private static final String ERROR = "ERROR";
        static int[][] matrix1;
        static int[][] matrix2;

        public static void run() {
            Scanner scanner = new Scanner(System.in);
            matrix1 = getMatrix(scanner);
            matrix2 = getMatrix(scanner);

            if (compareMatrixSize(matrix1, matrix2)) {
                sumMatrix(matrix1, matrix2);
                printMatrix(matrix1);
            } else {
                System.out.println(ERROR);
            }
        }

        private static void printMatrix(int[][] matrix1) {
            for (int x = 0; x < matrix1.length; x++) {
                //System.out.println();
                for (int y = 0; y < matrix1[0].length; y++) {
                    System.out.printf("%d ", matrix1[x][y]);
                }
                System.out.println();
            }
        }

        private static void sumMatrix(int[][] matrix1, int[][] matrix2) {
            for (int x = 0; x < matrix1.length; x++) {
                for (int y = 0; y < matrix1[0].length; y++) {
                    matrix1[x][y] += matrix2[x][y];
                }
            }
        }

        private static boolean compareMatrixSize(int[][] matrix1, int[][] matrix2) {
            return matrix1.length == matrix2.length && matrix1[0].length == matrix2[0].length;
        }

        public static int[][] getMatrix(Scanner scanner) {
            String firstLine = scanner.nextLine();
            String[] firstLineArray = firstLine.trim().split(" ");
            int rows = Integer.parseInt(firstLineArray[0]);
            int col = Integer.parseInt(firstLineArray[1]);
            int[][] matrix = new int[rows][col];
            for (int x = 0; x < rows; x++) {
                String rowLine = scanner.nextLine();
                String[] rowLineArray = rowLine.trim().split(" ");
                int y = 0;
                for (String digit : rowLineArray) {
                    matrix[x][y] = Integer.parseInt(digit);
                    y++;
                }
            }
            return matrix;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5466#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 10 Feb 2023 15:48:46 UTC"
record: 2
